name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  COV_MIN: '85'

jobs:
  lint-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: pyproject.toml
      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Format check (Ruff formatter)
        run: make fmt-check
      - name: Lint
        run: |
          python -m ruff check src tests

  test:
    name: Tests (py${{ matrix.python-version }}, ${{ matrix.extras }})
    runs-on: ubuntu-latest
    needs: [lint-format]
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.9', '3.10', '3.11', '3.12' ]
        extras: [ 'base', 'aws', 'gcp', 'export', 'templates', 'orchestrator', 'ingest', 'env', 'docx', 'whisper' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: pyproject.toml
      - name: System deps (ffmpeg for whisper)
        if: ${{ matrix.extras == 'whisper' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.extras }}" = "base" ]; then
            pip install -e .
          else
            pip install -e .[${{ matrix.extras }}]
          fi
          # Always ensure pytest and coverage plugin available
          pip install pytest pytest-cov
      - name: Validate .env.example
        run: python scripts/check_env_example.py
      - name: Run tests with coverage
        run: |
          pytest --cov=podcast_transcriber \
                 --cov-report=xml \
                 --cov-report=term-missing:skip-covered \
                 --cov-fail-under=${{ env.COV_MIN }}
      - name: Upload coverage to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: ${{ matrix.extras }},py${{ matrix.python-version }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Add job summary (success)
        if: ${{ success() }}
        run: |
          PYTEST_VER=$(python - <<'PY'
          import pytest, sys
          print(getattr(pytest, '__version__', 'unknown'))
          PY
          )
          TOTAL_TESTS=$(pytest --collect-only -q 2>/dev/null | wc -l)
          {
            echo "### Test Job";
            echo "- Python: ${{ matrix.python-version }}";
            echo "- Extras: ${{ matrix.extras }}";
            echo "- Pytest: ${PYTEST_VER}";
            echo "- Collected tests: ${TOTAL_TESTS}";
            echo "- Status: success";
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Add job summary (failure)
        if: ${{ failure() }}
        run: |
          PYTEST_VER=$(python - <<'PY'
          import pytest, sys
          print(getattr(pytest, '__version__', 'unknown'))
          PY
          )
          TOTAL_TESTS=$(pytest --collect-only -q 2>/dev/null | wc -l)
          {
            echo "### Test Job";
            echo "- Python: ${{ matrix.python-version }}";
            echo "- Extras: ${{ matrix.extras }}";
            echo "- Pytest: ${PYTEST_VER}";
            echo "- Collected tests: ${TOTAL_TESTS}";
            echo "- Status: failure";
          } >> "$GITHUB_STEP_SUMMARY"
